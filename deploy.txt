1.- Config server

Necesitamos un cluster replica set para este componente del shard cluster.

Directorios

data/configserver1
data/configserver2
data/configserver3

3 Instancias para cada miembro del config server, las levantamos:

mongod --configsvr --replSet configServerGetafe --dbpath data/configserver1 --port 27001
mongod --configsvr --replSet configServerGetafe --dbpath data/configserver2 --port 27002
mongod --configsvr --replSet configServerGetafe --dbpath data/configserver3 --port 27003

Nos conectamos a uno de los miembros:

mongo --port 27001

E inicializamos el cluster (como configsvr)

rs.initiate({
    _id: "configServerGetafe",
    configsvr: true,
    members: [
        {_id: 0, host: "localhost:27001"},
        {_id: 1, host: "localhost:27002"},
        {_id: 2, host: "localhost:27003"}
    ]
})

2.- Shards

De momento creamos dos cluster replica set, uno para cada shard.

      1er cluster

      Directorios
      data/shard1server1
      data/shard1server2
      data/shard1server3

      Levantamos 3 máquinas:

      mongod --shardsvr --replSet shard1ServerGetafe --dbpath data/shard1server1 --port 27101
      mongod --shardsvr --replSet shard1ServerGetafe --dbpath data/shard1server2 --port 27102
      mongod --shardsvr --replSet shard1ServerGetafe --dbpath data/shard1server3 --port 27103

      Nos conectamos a uno de los miembros

      mongo --port 27101

      rs.initiate({
          _id: "shard1ServerGetafe",
          members: [
              {_id: 0, host: "localhost:27101"},
              {_id: 1, host: "localhost:27102"},
              {_id: 2, host: "localhost:27103"}
          ]
      })

       2º cluster

      Directorios
      data/shard2server1
      data/shard2server2
      data/shard2server3

      Levantamos 3 máquinas:

      mongod --shardsvr --replSet shard2ServerGetafe --dbpath data/shard2server1 --port 27201
      mongod --shardsvr --replSet shard2ServerGetafe --dbpath data/shard2server2 --port 27202
      mongod --shardsvr --replSet shard2ServerGetafe --dbpath data/shard2server3 --port 27203

      Nos conectamos a uno de los miembros

      mongo --port 27201

      rs.initiate({
          _id: "shard2ServerGetafe",
          members: [
              {_id: 0, host: "localhost:27201"},
              {_id: 1, host: "localhost:27202"},
              {_id: 2, host: "localhost:27203"}
          ]
      })

3.- Mongos

Levantamos mongos con el siguiente comando.

mongos --configdb configServerGetafe/localhost:27001,localhost:27002,localhost:27003 --port 27000

4.- Añadir los shard al sharding cluster

Nos conectamos a la instancia de mongos

mongo --port 27000

Añadimos cada shard

sh.addShard("shard1ServerGetafe/localhost:27101,localhost:27102,localhost:27103")

sh.addShard("shard2ServerGetafe/localhost:27201,localhost:27202,localhost:27203")

Comprobamos con:

sh.status({verbose: true})

5.- Añadir base de datos y colección al sharding.

- En un sharding cluster es posible tener bases de datos y colecciones tanto shard como no shard

- Necesitamos especificar que una base de datos y una colección va a ser sharding

Para nuestro test vamos a modificar el valor del chunk size 

Esta configuración se modifica en la base de datos config del configServer

Desde mongos:

use config

db.settings.save({_id: "chunksize", value: 16}) // Tamaño en megas

Vamos a crear una base de datos en sharding cluster que pueda tener colecciones fragmentadas.

sh.enableSharding(<nombreBaseDatos>)

Creamos una colección de tipo shard en la cual ya tenemos que pasar la shard key o clave de shard.

sh.shardCollection("<basedatos.colección>", {clave1: 1, clave2: 1, ...})

Comprobamos con:

sh.status({verbose: true})

ó

db.participantes.getShardDistribution()